package iterator

import "testing"

func slicesEqual(type T comparable)(a, b []T) bool {
	if len(a) != len(b) {
		return false
	}
	for i := range a {
		if a[i] != b[i] {
			return false
		}
	}
	return true
}

func assertSlicesEqual(type T comparable)(t *testing.T, got, want []T) {
	if !slicesEqual(got, want) {
		t.Errorf("slices not equal:\n\tgot  %#v\n\twant %#v", got, want)
	}
}

type iteratorTest(type T comparable) struct {
	name     string
	iter     Iterator(T)
	expected []T
}

func (test iteratorTest(T)) Run(t *testing.T) {
	t.Run(test.name, func(t *testing.T) {
		assertSlicesEqual(t, Collect(test.iter), test.expected)
	})
}

func TestIterators(t *testing.T) {
	iteratorTest(int){"Count", Take(5, Count(1, 2)), []int{1, 3, 5, 7, 9}}.Run(t)
	iteratorTest(int){"CountDown", Take(5, Count(1, -1)), []int{1, 0, -1, -2, -3}}.Run(t)
	iteratorTest(int){"CountUntil", CountUntil(1, 2, 9), []int{1, 3, 5, 7}}.Run(t)
	iteratorTest(int){"CountUntilOffset", CountUntil(1, 2, 8), []int{1, 3, 5, 7}}.Run(t)
	iteratorTest(int){"CountUntil", CountUntil(1, -2, -5), []int{1, -1, -3}}.Run(t)
	iteratorTest(int){"FromSlice", FromSlice([]int{1, 3, 4, 5}), []int{1, 3, 4, 5}}.Run(t)
	iteratorTest(int){"TakeShort", Take(3, FromSlice([]int{1})), []int{1}}.Run(t)
	iteratorTest(int){"TakeNone", Take(3, FromSlice([]int(nil))), []int(nil)}.Run(t)
	iteratorTest(int){"TakeWhile",
		TakeWhile(func(x int) bool { return x < 3 }, FromSlice([]int{1, 2, 5, 2})),
		[]int{1, 2}}.Run(t)
	iteratorTest(int){"Drop", Take(3, Drop(5, Count(1, 2))), []int{11, 13, 15}}.Run(t)
	iteratorTest(int){"DropAll", Drop(3, FromSlice([]int{1, 2, 3})), []int(nil)}.Run(t)
	iteratorTest(int){"DropWhile",
		DropWhile(func(x int) bool { return x < 3 }, FromSlice([]int{1, 2, 5, 2})),
		[]int{5, 2}}.Run(t)
	iteratorTest(int){"Repeat", Take(3, Repeat(5)), []int{5, 5, 5}}.Run(t)
	iteratorTest(int){"Chain", Chain(FromSlice([]int{1, 2}), CountUntil(3, 1, 5)), []int{1, 2, 3, 4}}.Run(t)
	iteratorTest(int){"ChainIters",
		ChainIters(Take(2, FromSlice([](Iterator(int)){
			FromSlice([]int{1, 2}), CountUntil(3, 1, 5), Repeat(7)}))),
		[]int{1, 2, 3, 4}}.Run(t)
}
