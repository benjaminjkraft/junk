package slices

func Map(type T1, T2)(s []T1, f func(T1) T2) []T2 {
	r := make([]T2, len(s))
	for i, v := range s {
		r[i] = f(v)
	}
	return r
}

func MapErr(type T1, T2)(s []T1, f func(T1) (T2, error)) ([]T2, error) {
	r := make([]T2, len(s))
	for i, v := range s {
		var err error
		r[i], err = f(v)
		if err != nil {
			return nil, err
		}
	}
	return r, nil
}

func MapErrs(type T1, T2)(s []T1, f func(T1) (T2, error)) ([]T2, []error) {
	r := make([]T2, len(s))
	var errs []error
	for i, v := range s {
		var err error
		r[i], err = f(v)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return r, errs
}
