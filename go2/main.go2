package main

import (
	"context"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"strconv"
	"strings"

	"github.com/benjaminjkraft/junk/go2/result"
	"github.com/benjaminjkraft/junk/go2/slices"
)

func bytestoi(b []byte) result.Result(int) {
	return result.NewResult(strconv.Atoi(string(b)))
}

func resultTypes() {
	b := strings.NewReader("10")
	// bytestoi(ioutil.ReadAll(b)), with error handling
	i, err := result.Lift(bytestoi)(
		result.Func(ioutil.ReadAll)(
			b)).Unwrap()

	if err != nil {
		fmt.Println(err)
	}
	fmt.Println(i)
}

func getresponse(ctx context.Context, req *http.Request) ([]byte, error) {
	fmt.Printf("making request to %v\n", req.URL)
	defer fmt.Printf("completed request to %v\n", req.URL)

	resp, err := http.DefaultClient.Do(req.WithContext(ctx))
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("bad status %v", resp.StatusCode)
	}

	return ioutil.ReadAll(resp.Body)
}

func str(b []byte) string { return string(b) }

func httpReqs() {
	reqs, err := slices.MapErr([]string{"www.khanacademy.org", "google.com", "en.wikipedia.org"},
		func(domain string) (*http.Request, error) {
			return http.NewRequest("GET", "https://"+domain+"/robots.txt", nil)
		})
	if err != nil {
		fmt.Println(err)
		return
	}

	resps, err := slices.ParallelMap(context.Background(), getresponse, reqs)
	if err != nil {
		fmt.Println(err)
		return
	}

	fmt.Println(slices.Map(resps, str))
}

func unmarshal(type *T)(data []byte) (*T, error) {
	ret := new(T)
	return ret, json.Unmarshal(data, ret)
}

type structA struct {
	A int `json:"a"`
}

func main() {
	resultTypes()
	httpReqs()
	fmt.Println(unmarshal(*structA)([]byte(`{"a": 1}`)))
	startsWithFoo := func(s string) bool { return strings.HasPrefix(s, "foo") }
	fmt.Println(slices.Any([]string{"foo", "foobar", "bar"}, startsWithFoo))
	fmt.Println(slices.All([]string{"foo", "foobar", "bar"}, startsWithFoo))
}
